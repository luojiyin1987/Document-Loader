#!/usr/bin/env python3
"""
Python code example for testing code processing capabilities
"""

import os
import sys
from typing import List, Dict, Any

class DataProcessor:
    """Data processing class with various methods"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.data = []
    
    def load_data(self, file_path: str) -> List[Dict]:
        """Load data from file"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            self.data = data
            return data
        except FileNotFoundError:
            print(f"File not found: {file_path}")
            return []
        except json.JSONDecodeError:
            print(f"Invalid JSON in file: {file_path}")
            return []
    
    def process_data(self) -> Dict[str, Any]:
        """Process loaded data"""
        if not self.data:
            return {"error": "No data loaded"}
        
        processed = {
            "count": len(self.data),
            "processed_items": []
        }
        
        for item in self.data:
            processed_item = {
                "id": item.get("id"),
                "name": item.get("name", "").upper(),
                "value": item.get("value", 0) * 2
            }
            processed["processed_items"].append(processed_item)
        
        return processed
    
    def save_results(self, results: Dict[str, Any], output_path: str) -> bool:
        """Save processing results"""
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"Error saving results: {e}")
            return False

def main():
    """Main function"""
    processor = DataProcessor()
    data = processor.load_data("input.json")
    results = processor.process_data()
    processor.save_results(results, "output.json")

if __name__ == "__main__":
    main()