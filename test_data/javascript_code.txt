/**
 * JavaScript code example for testing
 */

class DataProcessor {
    constructor(config = {}) {
        this.config = config;
        this.data = [];
    }
    
    /**
     * Load data from file or API
     */
    async loadData(source) {
        try {
            const response = await fetch(source);
            this.data = await response.json();
            return this.data;
        } catch (error) {
            console.error('Error loading data:', error);
            return [];
        }
    }
    
    /**
     * Process the loaded data
     */
    processData() {
        if (!this.data || this.data.length === 0) {
            return { error: "No data loaded" };
        }
        
        const processed = {
            count: this.data.length,
            processedItems: this.data.map(item => ({
                id: item.id,
                name: item.name?.toUpperCase() || '',
                value: (item.value || 0) * 2,
                timestamp: new Date().toISOString()
            }))
        };
        
        return processed;
    }
    
    /**
     * Save results to localStorage or download
     */
    saveResults(results, filename = 'results.json') {
        const jsonString = JSON.stringify(results, null, 2);
        
        // Save to localStorage
        localStorage.setItem('processedData', jsonString);
        
        // Download as file
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        a.click();
        URL.revokeObjectURL(url);
    }
}

// Usage example
const processor = new DataProcessor();
processor.loadData('https://api.example.com/data')
    .then(data => {
        const results = processor.processData();
        processor.saveResults(results);
    })
    .catch(error => {
        console.error('Processing failed:', error);
    });